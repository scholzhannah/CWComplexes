/-
Copyright (c) 2025 Floris van Doorn and Hannah Scholz. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Floris van Doorn, Hannah Scholz
-/

import Mathlib.Topology.Defs.Induced
import Mathlib.Topology.Coherent
import Mathlib.Topology.Compactness.CompactlyGeneratedSpace

/-!
# Kspaces and the k-ification
In this file we will define k-spaces and the k-ification and prove basic properties about them.
This is a weaker version of `CompactlyGeneratedSpace`. These notions agree on Hausdorff spaces.
They are both referred to as compactly generated spaces in the literature.
## Main definitions
* `KSpace`: A k-space is a topological space in which a set `A` is open iff for every compact set
  `B`, the intersection `A ∩ B` is open in `B`.
* `instkification`: For a topological space `X` one can define another topology on `X` as follows:
  `A` is open iff for all compact sets `B`, the intersection `A ∩ B` is open in `B`.
## Main results
* `of_weaklyLocallyCompactSpace`: every weakly locally compact space is a k-space
* `of_sequentialSpace`: every sequential space is a k-space
* `of_compactlyGeneratedSpace`: every compaclty generated space is a k-space.
* `isCompact_iff_isCompact_in_kification`: The compact sets of a topological space and its
  k-ification agree.
* `kspace_kification`: The k-ification makes any space into a k-space.
* `kification_kspace_eq_self`: The k-ification of a k-space `X` preserves the topology on `X`.
* `continuous_kification_of_continuousOn_compact`: If a map `f : X → Y` is continuous on every
  compact subset of `X` then it is continuous when viewed as a map from `kification X` to
  `kification Y`.
## References
* [J. Munkres, *Topology*][Munkres2000]
* <https://en.wikipedia.org/wiki/Compactly_generated_space>
-/

noncomputable section

open Set Set.Notation Topology

/-! ### K-spaces-/

/-- A space is a KSpace if the topology is generated by the compact sets. -/
class KSpace  (X : Type*) [TopologicalSpace X] : Prop where
  /-- A space is a k-space if the topology is generated by the compact sets. -/
  isCoherentWith : IsCoherentWith (X := X) {K | IsCompact K}

namespace KSpace

universe u

variable {X : Type u} [TopologicalSpace X]

/-- A set `A` in a k-space is open iff for every compact set `K`, the intersection `K ∩ A` is
open in `K`. -/
lemma isOpen_iff [KSpace X] (A : Set X) : IsOpen A ↔ ∀ K, IsCompact K → IsOpen (K ↓∩ A) :=
  IsCoherentWith.isOpen_iff isCoherentWith

/-- A set `A` in a k-space is closed iff for every compact set `K`, the intersection `K ∩ A` is
closed in `K`. -/
lemma isClosed_iff [KSpace X] (A : Set X) : IsClosed A ↔ ∀ K, IsCompact K → IsClosed (K ↓∩ A) :=
  IsCoherentWith.isClosed_iff isCoherentWith

/-- If every set `A` is open if for every compact `K` the intersection `K ∩ A` is open in `K`,
then the space is a k-space. -/
lemma of_isOpen (h : ∀ (A : Set X), (∀ K, IsCompact K → IsOpen (K ↓∩ A)) → IsOpen A) :
    KSpace X where
  isCoherentWith := {isOpen_of_forall_induced := h}

/-- If every set `A` is closed if for every compact `K` the intersection `K ∩ A` is closed in `K`,
then the space is a k-space. -/
lemma of_isClosed (h : ∀ (A : Set X), (∀ K, IsCompact K → IsClosed (K ↓∩ A)) → IsClosed A) :
    KSpace X where
  isCoherentWith := IsCoherentWith.of_isClosed h

/-- Every weakly locally compact space is a k-space. -/
instance of_weaklyLocallyCompactSpace [WeaklyLocallyCompactSpace X] : KSpace X where
  isCoherentWith := CompactlyCoherentSpace.of_weaklyLocallyCompactSpace.isCoherentWith

/-- Every sequential space is a k-space. -/
instance of_sequentialSpace [SequentialSpace X] : KSpace X where
  isCoherentWith := CompactlyCoherentSpace.of_sequentialSpace.isCoherentWith

/-- In a k-space `X`, a set `s` is open when `f ⁻¹' s` is open for every continuous map from a
compact space. -/
lemma preimage_isOpen [KSpace X] (s : Set X) (hs : (∀ (K : Type u) [TopologicalSpace K],
      [CompactSpace K] → ∀ (f : K → X), Continuous f → IsOpen (f ⁻¹' s))) :
    IsOpen s := by
  rw [isOpen_iff]
  intro K hK
  let _ : CompactSpace (Elem K) := isCompact_iff_compactSpace.mp hK
  exact hs (Elem K) Subtype.val continuous_subtype_val

/-- A topological space `X` is compactly generated if a set `s` is open when `f ⁻¹' s?` is open for
every continuous map `f : K → X`, where `K` is compact. -/
lemma of_preimage_isOpen (h : ∀ (s : Set X), (∀ (K : Type u) [TopologicalSpace K],
      [CompactSpace K] → ∀ (f : K → X), Continuous f → IsOpen (f ⁻¹' s)) → IsOpen s) :
    KSpace X where
  isCoherentWith := {
    isOpen_of_forall_induced := by
      intro s hs
      apply h s
      intro K _ _ f hf
      change IsOpen ((fun x ↦ ⟨f x, mem_image_of_mem f trivial⟩) ⁻¹' ((f '' univ) ↓∩ s))
      apply (hf.subtype_mk fun x ↦ mem_image_of_mem f trivial).isOpen_preimage
      exact hs (f '' univ) (CompactSpace.isCompact_univ.image hf)}

/-- Every compactly generated space is a k-space. -/
instance of_compactlyGeneratedSpace [CompactlyGeneratedSpace X] : KSpace X := by
  apply of_preimage_isOpen
  intro s h
  apply CompactlyGeneratedSpace.isOpen'
  intro K _ _ _ f hf
  exact h K f hf

/-- A k-space that is Hausdorff is compactly generated. -/
instance compactlyGeneratedSpace_of_kspace_of_t2 [T2Space X] [KSpace X] :
    CompactlyGeneratedSpace X := by
  apply compactlyGeneratedSpace_of_isClosed_of_t2
  intro s hs
  rw [isClosed_iff]
  intro K hK
  rw [← Subtype.preimage_coe_inter_self]
  exact (hs K hK).preimage_val

/-- A type synonym used for the k-ification of a topological space. -/
def kification (X : Type*) := X

/-- The map taking a space to its k-ification. -/
def toKification (X : Type*) : X ≃ kification X := Equiv.refl _

lemma toKification_image {X : Type*} (A : Set X) :
    toKification X '' A = (A : Set (kification X)) := by
  ext
  exact mem_image_iff_of_inverse (congrFun rfl) (congrFun rfl)

lemma toKification_symm_image {X : Type*} (A : Set X) : (toKification X).symm '' A = A := by
  ext
  exact mem_image_iff_of_inverse (congrFun rfl) (congrFun rfl)

lemma toKification_preimage {X : Type*} (A : Set X) :
    toKification X ⁻¹' A = (A : Set (kification X)) := by
  ext
  exact mem_preimage

lemma toKification_symm_preimage {X : Type*} (A : Set X) : (toKification X).symm ⁻¹' A = A := by
  ext
  exact mem_preimage

/-- For a topological space `X` the k-ification is defined as:
`A` is open iff for all compact sets `B`, the intersection `A ∩ B` is open in `B`. -/
instance kification.instTopologicalSpace : TopologicalSpace (kification X) where
  IsOpen A := ∀ (K : Set X), IsCompact K → IsOpen (K ↓∩ (toKification X).symm '' A)
  isOpen_univ := by simp
  isOpen_inter A B hA hB K hK := by
    rw [image_inter (toKification X).symm.injective]
    exact (hA K hK).inter (hB K hK)
  isOpen_sUnion s hs K hK := by
    rw [image_sUnion]
    rw [preimage_val_sUnion]
    apply isOpen_sUnion
    rintro _ ⟨u, hu, rfl⟩
    rw [mem_image] at hu
    obtain ⟨t, ht⟩ := hu
    exact ht.2 ▸ hs t ht.1 K hK

/-- A set `A` in the k-ification is open iff for all compact sets `K`,
the intersection `K ∩ A` is open in `K`. -/
lemma kification.isOpen_iff {A : Set (kification X)} : IsOpen A ↔
    ∀ (K : Set X), IsCompact K → IsOpen (K ↓∩ (toKification X).symm '' A) := by
  rfl

/-- A set `A` is the k-ification is closed iff for all compact sets `K`,
the intersection `K ∩ A` is closed in `K`. -/
lemma kification.isClosed_iff {A : Set (kification X)} :
    IsClosed (X := kification X) A ↔
      ∀ (K : Set X), IsCompact K → IsClosed (K ↓∩ (toKification X).symm '' A) := by
  rw [← isOpen_compl_iff, isOpen_iff, Equiv.image_compl]
  congrm ∀ (K : Set X), IsCompact K → ?_
  exact isOpen_compl_iff

lemma continuous_toKification_symm :
    Continuous (toKification X).symm where
  isOpen_preimage A hA := by
    rw [kification.isOpen_iff, Equiv.image_preimage]
    intros
    exact isOpen_induced hA

lemma isOpenMap_tokification : IsOpenMap (toKification X) := by
  intro A hA
  rw [kification.isOpen_iff, Equiv.symm_image_image]
  intro K hK
  exact hA.preimage_val

/-- The k-ification is finer than the original topology. -/
lemma kification_le {X : Type*} [t : TopologicalSpace X] :
    (kification.instTopologicalSpace : TopologicalSpace X) ≤ (t : TopologicalSpace X) := by
  rw [← continuous_id_iff_le]
  change Continuous (toKification X).symm
  exact continuous_toKification_symm

/-- The compact sets of a topological space and its k-ification agree. -/
lemma isCompact_iff_isCompact_tokification_image (K : Set X) :
    IsCompact K ↔ IsCompact (toKification X '' K) := by
  constructor
  · intro hK
    rw [isCompact_iff_finite_subcover]
    intro ι U hU hKU
    simp_rw [kification.isOpen_iff] at hU
    choose U' hU' using hU
    have hKU' : K ⊆ ⋃ i, U' i K hK := by
      simp_rw [← inter_eq_left, inter_iUnion,
        Subtype.preimage_coe_eq_preimage_coe_iff.mp (hU' _ K hK).2, ← inter_iUnion, inter_eq_left,
        toKification_symm_image]
      rw [toKification_image] at hKU
      exact hKU
    rcases (isCompact_iff_finite_subcover.1 hK) (fun i ↦ U' i K hK)
      (fun i ↦ (hU' i K hK).1) hKU' with ⟨ι', hι'⟩
    use ι'
    have := fun i ↦ toKification_symm_image _ ▸
      Subtype.preimage_coe_eq_preimage_coe_iff.mp (hU' i K hK).2
    simp_rw [toKification_image, ← inter_eq_left, inter_iUnion,
      ← this, ← inter_iUnion, inter_eq_left]
    exact hι'
  · intro hK
    exact (toKification X).symm_image_image K ▸ hK.image continuous_toKification_symm

/-- The k-ification makes any space into a k-space. -/
instance kspace_kification : KSpace (kification X) where
  isCoherentWith := {
    isOpen_of_forall_induced := by
      intro A h
      rw [kification.isOpen_iff]
      intro K hK
      obtain ⟨E, hE, hEA⟩ :=
        h (toKification X '' K) ((isCompact_iff_isCompact_tokification_image K).1 hK)
      rw [kification.isOpen_iff] at hE
      obtain ⟨F, openF, hF⟩ := hE K hK
      refine ⟨F, openF, ?_⟩
      rw [toKification_image] at hEA
      simp only [kification] at hEA
      simp_rw [hF, toKification_symm_image, hEA]}

/-- The k-ification preserves the topology of k-spaces. -/
lemma kification_kspace_eq_self {X : Type*} [t : TopologicalSpace X] [KSpace X] :
    t = kification.instTopologicalSpace := by
  rw [TopologicalSpace.ext_iff]
  intro
  rw [kification.isOpen_iff, KSpace.isOpen_iff, toKification_symm_image]

variable {Y : Type*} [TopologicalSpace Y]

lemma from_kification_continuous_of_continuous (f : X → Y)
    (hf : Continuous f) : Continuous (X := kification X) f := by
  rw [continuous_def] at hf ⊢
  intro s hs
  exact (TopologicalSpace.le_def.1 kification_le) (f ⁻¹' s) (hf s hs)

lemma from_kification_continuousOn_of_continuousOn (f : X → Y) (s : Set X) (hf : ContinuousOn f s) :
    ContinuousOn (X := kification X) f s := by
  rw [continuousOn_iff'] at hf ⊢
  intro t ht
  obtain ⟨u, hu, hut⟩ := hf t ht
  exact ⟨u, ⟨(TopologicalSpace.le_def.1 kification_le) u hu, hut⟩⟩

lemma continuous_compact_to_kification [CompactSpace X] (f : X → Y) (hf : Continuous f) :
    Continuous ((toKification Y) ∘ f) := by
  rw [continuous_iff_isClosed]
  intro s hs
  simp_rw [kification.isClosed_iff, isClosed_induced_iff,
    Subtype.preimage_val_eq_preimage_val_iff] at hs
  obtain ⟨t, ht, hst⟩ := hs (range f) (isCompact_range hf)
  suffices IsClosed (f ⁻¹' (range f ∩ s)) by
    simpa only [preimage_inter, preimage_range, univ_inter]
  rw [toKification_symm_image] at hst
  rw [← hst, Set.preimage_inter, Set.preimage_range, Set.univ_inter]
  exact ht.preimage hf

lemma continuousOn_compact_to_kification {A : Set X} (hA : IsCompact A) (f : X → Y)
    (hf : ContinuousOn f A) : ContinuousOn ((toKification Y) ∘ f) A := by
  rw [continuousOn_iff_continuous_restrict] at hf ⊢
  have _ := isCompact_iff_compactSpace.1 hA
  exact continuous_compact_to_kification (A.restrict f) hf

/-- If a map `f : X → Y` is continuous on every compact subset of `X` then it is continuous when
viewed as a map from `kification X` to `kification Y`. -/
lemma continuous_kification_of_continuousOn_compact (f : X → Y)
    (hf : ∀ (C : Set X), IsCompact C → ContinuousOn f C) :
    Continuous ((toKification Y) ∘ f ∘ (toKification X).symm) := by
  have hf' :  ∀ (C : Set X), IsCompact C → ContinuousOn ((toKification Y) ∘ f) C :=
    fun C hC ↦ continuousOn_compact_to_kification hC f (hf C hC)
  rw [continuous_def]
  intro V hV
  simp only [kification.isOpen_iff]
  intro C hC
  specialize hf' C hC
  rw [continuousOn_iff'] at hf'
  obtain ⟨U, hU, hUV⟩ := hf' V hV
  rw [← Function.comp_assoc, preimage_comp, Equiv.image_preimage]
  suffices IsOpen (C ↓∩ (f ⁻¹' V ∩ C)) by
    rw [preimage_inter, Subtype.coe_preimage_self, inter_univ] at this
    exact this
  simp [preimage_comp, toKification_preimage] at hUV
  rw [hUV, preimage_inter, Subtype.coe_preimage_self, inter_univ]
  exact isOpen_induced hU

lemma continuous_kification_of_continuous (f : X → Y) (hf : Continuous f) :
    Continuous ((toKification Y) ∘ f ∘ (toKification X).symm) := by
  apply continuous_kification_of_continuousOn_compact
  intros
  exact hf.continuousOn

instance t2space_kification_of_t2space [t : T2Space X] :
    T2Space (kification X) :=
  t2Space_antitone kification_le t

end KSpace
