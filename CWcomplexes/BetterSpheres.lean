import CWcomplexes.SpheresAux

noncomputable section

open Metric Set

namespace Topology.CWComplex

/-! # Construction with two cells in every dimension. -/

/-**Comment**:
  We now move onto the second popular construction for the sphere:
  We construct the spheres inductively adding two cells in each dimension.
  While the actual construction is way more difficult, the characteristic maps are a lot
  simpler. -/

/-- A partial bijection sending the open ball in dimension `n` to the upper hemisphere
  (without the equator) of the sphere in dimension `n + 1`. -/
@[simps -isSimp]
def discToSphereUp (n : ‚Ñï) :
    PartialEquiv (EuclideanSpace ‚Ñù (Fin n)) (EuclideanSpace ‚Ñù (Fin (n + 1))) where
  toFun := fun x ‚Ü¶ Fin.snoc x (‚àö(1 - ‚Äñx‚Äñ ^ 2))
  invFun := Fin.init
  source := ball 0 1
  target := sphere 0 1 ‚à© {x | x (Fin.last n) > 0}
  map_source' x hx := by
    constructor
    ¬∑ simp only [mem_ball, dist_zero_right] at hx
      rw [mem_sphere_iff_norm, sub_zero, ‚Üê sq_eq_sq‚ÇÄ (norm_nonneg _) zero_le_one, one_pow,
        EuclideanSpace.norm_eq, Real.sq_sqrt (Finset.sum_nonneg (fun _ _ ‚Ü¶ sq_nonneg _)),
        Fin.sum_univ_castSucc]
      simp only [Fin.snoc, Fin.coe_castSucc, Fin.is_lt, ‚ÜìreduceDIte, Fin.castLT_castSucc, cast_eq,
        Real.norm_eq_abs, sq_abs, Fin.val_last, lt_self_iff_false]
      rw [Real.sq_sqrt (by simp_all [hx.le]),
        ‚Üê Real.sq_sqrt (Finset.sum_nonneg (fun _ _ ‚Ü¶ sq_nonneg _))]
      simp_rw [‚Üê sq_abs (x _), ‚Üê Real.norm_eq_abs, ‚Üê EuclideanSpace.norm_eq, add_sub_cancel]
    ¬∑ simp_all
  map_target' y:= by
    intro ‚ü®hy1, hy2‚ü©
    simp_all only [mem_sphere_iff_norm, sub_zero, gt_iff_lt, mem_setOf_eq, mem_ball,
      dist_zero_right]
    rw [‚Üê hy1]
    apply EuclideanSpace.norm_finInit_lt
    simp_all only [Real.norm_eq_abs, gt_iff_lt, abs_pos]
    exact hy2.ne.symm
  left_inv' x hx := by simp
  right_inv' y := by
    intro ‚ü®hy1, hy2‚ü©
    simp_all
    suffices ‚àö(1 - norm (Fin.init y) (self := (PiLp.instNorm 2 fun x ‚Ü¶ ‚Ñù)) ^ 2) = y (Fin.last n) by
      rw [this, Fin.snoc_init_self]
    have : norm (Fin.init y) (self := (PiLp.instNorm 2 fun x ‚Ü¶ ‚Ñù)) ‚â§ 1 := by
      rw [‚Üê hy1]
      exact EuclideanSpace.norm_finInit_le y
    rw [‚Üê sq_eq_sq‚ÇÄ (Real.sqrt_nonneg _) hy2.le, Real.sq_sqrt (by simp_all), EuclideanSpace.norm_eq,
      ‚Üê one_pow (n := 2), ‚Üê hy1, EuclideanSpace.norm_eq,
      Real.sq_sqrt (Finset.sum_nonneg (fun _ _ ‚Ü¶ sq_nonneg _)),
      Real.sq_sqrt (Finset.sum_nonneg (fun _ _ ‚Ü¶ sq_nonneg _)), sub_eq_iff_eq_add,
      Fin.sum_univ_castSucc, add_comm, Real.norm_eq_abs, sq_abs]
    rfl

/-- `discToSphereUp` is continuous. -/
lemma continuous_discToSphereUp (n : ‚Ñï) : Continuous (discToSphereUp n) := by
  simp only [discToSphereUp]
  apply Continuous.finSnoc
  ¬∑ exact continuous_id'
  ¬∑ continuity

/-- The inverse of `discToSphereUp` is continuous. -/
lemma continuous_discToSphereUp_symm (n : ‚Ñï) : Continuous (discToSphereUp n).symm :=
  continuous_id.finInit

/-- The image of the sphere in dimension `n` under `discToSphereUp` is the 'equator' of the
  sphere in dimension `n + 1`, i.e. the sphere intersected with the hyperplane where the last
  coordinate is zero. -/
@[simp]
lemma discToSphereUp_image_sphere (n : ‚Ñï) :
    (discToSphereUp n) '' sphere 0 1 = (sphere 0 1) ‚à© {x | x (Fin.last n) = 0} := by
  ext x
  simp only [mem_image, mem_sphere_iff_norm, sub_zero, mem_inter_iff, mem_setOf_eq]
  constructor
  ¬∑ intro ‚ü®y, hy1, hy2‚ü©
    rw [‚Üê hy2]
    simp only [discToSphereUp, gt_iff_lt, hy1, one_pow, sub_self, Real.sqrt_zero, Fin.snoc_last,
      and_true]
    simp only [EuclideanSpace.norm_eq, Fin.sum_univ_castSucc, Fin.snoc_castSucc, Fin.snoc_last,
      Real.norm_eq_abs (r := 0), sq_abs, ne_eq, OfNat.ofNat_ne_zero, not_false_eq_true, zero_pow,
      add_zero]
    rw [‚Üê EuclideanSpace.norm_eq, hy1]
  ¬∑ intro ‚ü®h1, h2‚ü©
    use Fin.init x
    simp only [EuclideanSpace.norm_eq, Fin.sum_univ_castSucc, h2, Real.norm_eq_abs (r := 0),
      sq_abs, ne_eq, OfNat.ofNat_ne_zero, not_false_eq_true, zero_pow, add_zero] at h1
    simp only [EuclideanSpace.norm_eq, Fin.init, h1, discToSphereUp,
      one_pow, sub_self, Real.sqrt_zero, true_and]
    simp only [‚Üê h2, Fin.snoc_init_self]

/-- The image of the closed ball in dimension `n` under `discToSphereUp` is the
  upper hemisphere of the sphere in dimenion `n + 1`. -/
@[simp]
lemma discToSphereUp_image_closedBall (n : ‚Ñï) :
    (discToSphereUp n) '' closedBall 0 1 = (sphere 0 1) ‚à© {x | x (Fin.last n) ‚â• 0} := by
  simp only [ge_iff_le]
  ext x
  simp only [mem_image, mem_sphere_iff_norm, sub_zero, mem_inter_iff, mem_setOf_eq]
  constructor
  ¬∑ intro ‚ü®y, hy1, hy2‚ü©
    simp only [mem_closedBall, dist_zero_right] at hy1
    constructor
    ¬∑ simp only [‚Üê hy2, discToSphereUp, gt_iff_lt]
      nth_rw 1 [EuclideanSpace.norm_eq]
      simp only [Real.norm_eq_abs, sq_abs, Fin.sum_univ_castSucc, Fin.snoc_castSucc, Fin.snoc_last,
        (1 - ‚Äñy‚Äñ ^ 2).sq_sqrt (by simp_all), Real.sqrt_eq_one]
      simp only [EuclideanSpace.norm_eq, Real.norm_eq_abs, sq_abs,
        (‚àë x : Fin n, y x ^ 2).sq_sqrt (Finset.sum_nonneg' (fun i ‚Ü¶ sq_nonneg (y i))),
        add_sub_cancel]
    ¬∑ simp [‚Üê hy2, discToSphereUp_apply]
  ¬∑ intro ‚ü®h1, h2‚ü©
    use Fin.init x
    simp only [EuclideanSpace.norm_eq, Fin.sum_univ_castSucc, Real.sqrt_eq_one] at h1
    symm at h1
    rw [‚Üê sub_eq_iff_eq_add', ‚Üê Real.sq_sqrt (Finset.sum_nonneg' (fun i ‚Ü¶ sq_nonneg _)),
      ‚Üê EuclideanSpace.norm_eq, Real.norm_eq_abs, sq_abs] at h1
    change 1 - (norm (E := EuclideanSpace ‚Ñù (Fin n)) (Fin.init x)) ^ 2 = x (Fin.last n) ^ 2 at h1
    constructor
    ¬∑ rw [sub_eq_iff_eq_add', ‚Üê sub_eq_iff_eq_add] at h1
      rw [mem_closedBall, dist_zero_right, ‚Üê sq_le_sq‚ÇÄ (norm_nonneg _) zero_le_one, one_pow, ‚Üê h1]
      simp [h2]
    ¬∑ simp [discToSphereUp, gt_iff_lt, h1, Real.sqrt_sq h2]

abbrev Hyperplane (n m : ‚Ñï) : Set (EuclideanSpace ‚Ñù (Fin n)) :=
  {x | ‚àÄ i (h1 : i ‚â•  m) (h2 : i < n), x ‚ü®i, by simp [h2]‚ü© = 0}

@[simps]
def embedHyperplane (n m : ‚Ñï) : PartialEquiv
    (EuclideanSpace ‚Ñù (Fin n)) (EuclideanSpace ‚Ñù (Fin (n + m))) where
  toFun x := Fin.append x (fun y ‚Ü¶ 0)
  invFun y := Fin.take n (n.le_add_right m) y
  source := univ
  target := Hyperplane (n + m) n
  map_source' x hx := by
    intro i hi1 hi2
    simp [Fin.append, Fin.addCases, hi1]
  map_target' y hy := mem_univ _
  left_inv'  x _ := by simp [Fin.take_append_left _ n.le_refl]
  right_inv' y hy := by
    ext i
    by_cases hi : i < n
    ¬∑ simp_all only [mem_setOf_eq, ge_iff_le, Fin.append, Fin.addCases, ‚ÜìreduceDIte,
        Fin.take_apply]
      rfl
    ¬∑ simp_all [Fin.append, Fin.addCases]

/-- Not used anymore -/
lemma Fin.injective_append_right {n m : ‚Ñï} {Œ± : Sort*} (b : Fin n ‚Üí Œ±) :
    Function.Injective (fun x ‚Ü¶ Fin.append (m := m) x b) := by
  intro a1 a2 ha
  ext x
  replace ha := funext_iff.1 ha (Fin.castAdd n x)
  simp_all

lemma injective_embedHyperplane (n m : ‚Ñï) : Function.Injective (embedHyperplane n m) :=
  PartialEquiv.injective_of_source_eq_univ _ rfl

lemma embedHyperplane_image (n m : ‚Ñï) (u : Set (EuclideanSpace ‚Ñù (Fin n)))
    (v : Set (EuclideanSpace ‚Ñù (Fin (n + m)))) :
  embedHyperplane n m '' u = v ‚à© Hyperplane (n + m) n ‚Üî
    (embedHyperplane n m).symm '' v = u := by
  constructor
  ¬∑ intro h

    sorry
  ¬∑ intro h
    rw [PartialEquiv.symm_image_eq_source_inter_preimage, embedHyperplane_source, univ_inter] at h
    ¬∑
      rw [‚Üê h]

      sorry
    ¬∑ sorry

@[simp]
def discToSphereEmbed (n m : ‚Ñï) :
    PartialEquiv (EuclideanSpace ‚Ñù (Fin n)) (EuclideanSpace ‚Ñù (Fin ((n + 1) + m))) :=
  (discToSphereUp n).transEmbedding ((Fin.castAddEmb m).euclidean (ùïú := ‚Ñù))

@[simp]
lemma discToSphereEmbed_image_sphere (n m : ‚Ñï) :
    (discToSphereEmbed n m) '' sphere 0 1 = (sphere 0 1) ‚à© Hyperplane ((n + 1) + m) n  := by
  rw [discToSphereEmbed, PartialEquiv.coe_transEmbedding, Set.image_comp,
    discToSphereUp_image_sphere]
  apply subset_antisymm
  ¬∑ apply subset_inter _
    ¬∑ sorry
    ¬∑ sorry
  ¬∑ sorry


/-This is an attempt to already go up all the dimensions at once. This seems too complicated to me.
-/

/-- A partial bijection sending the open ball in dimension `n` to the upper hemisphere
  (without the equator) of the sphere in dimension `n + 1`. -/
@[simps -isSimp]
def discToSphereUp' (n m : ‚Ñï) :
    PartialEquiv (EuclideanSpace ‚Ñù (Fin n)) (EuclideanSpace ‚Ñù (Fin (n + (m + 1)))) where
  toFun := fun x ‚Ü¶ Fin.append x (Fin.cons (‚àö(1 - ‚Äñx‚Äñ ^ 2)) (fun y ‚Ü¶ 0: Fin m ‚Üí ‚Ñù))
  invFun := fun x ‚Ü¶ Fin.take n (n.le_add_right (m + 1)) x
  source := ball 0 1
  target := sphere 0 1 ‚à© {x | x ‚ü®n , by simp‚ü© > 0} ‚à© Hyperplane (n + (m + 1)) (n + 1)
  map_source' x hx := by
    refine ‚ü®‚ü®?_, ?_‚ü©, ?_‚ü©
    ¬∑ sorry
    ¬∑ sorry
    ¬∑ simp
      intro i hi1 hi2
      have : ¬¨ i < n := by sorry
      simp [Fin.append, Fin.addCases, this, Fin.cons]
      sorry
  map_target' y:= sorry
  left_inv' x hx := by rw [Fin.take_append_left _ n.le_refl, Fin.take_eq_self]
  right_inv' y := sorry

end Topology.CWComplex
