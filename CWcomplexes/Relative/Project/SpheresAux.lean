import CWcomplexes.Relative.Project.Examples
import Mathlib.Analysis.InnerProductSpace.EuclideanDist

/-!
# Auxiliary Lemmas and Constructions for the CW-complex structures on spheres
-/

noncomputable section

open Metric Set

/-! # Lemmas needed for the continuity of `sphereToDisc` on the sphere. -/

/- The map `sphereToDisc` is made up of (the inverses of) two maps:
  `Homeomorph.unitBall` and `stereographic'`. On the sphere these maps are not defined.
  We define `sphereToDisc` to map the sphere to the relevant unit vector.
  In order to show that ``sphereToDisc` is continuous on the sphere we need to study how
  (the inverses of) `Homeomorph.unitBall` and `stereographic'` behave as we approach the edge of
  their domain.-/

/-- As we approach the sphere from inside the ball the inverse of `Homeomorph.unitBall` tends to
  infinity in its norm.-/
/- The proof of this statement just unnfolds the definition of `Homeomorph.unitBall` and then
  applies basic facts about convergence.-/
lemma Homeomorph.tendsto_norm_comp_unitBall_symm {E : Type*} [NormedAddCommGroup E]
    [NormedSpace ‚Ñù E] [Nontrivial E] (x : E) (hx : x ‚àà sphere (0 : E) 1) :
    Filter.Tendsto (norm ‚àò Homeomorph.unitBall.symm)
    (Filter.comap Subtype.val (nhds x)) Filter.atTop := by
  simp only [Homeomorph.unitBall, Homeomorph.trans, Equiv.trans, Homeomorph.coe_toEquiv,
    Homeomorph.coe_symm_toEquiv, Homeomorph.symm_symm, Homeomorph.Set.univ_apply,
    Homeomorph.homeomorph_mk_coe_symm, Equiv.coe_fn_symm_mk]
  change Filter.Tendsto
    (norm ‚àò (PartialHomeomorph.univUnitBall (E := E)).symm ‚àò (Subtype.val : ball (0 : E) 1 ‚Üí E))
      (Filter.comap Subtype.val (nhds x)) Filter.atTop
  rw [‚Üê Function.comp_assoc, ‚Üê Filter.tendsto_map'_iff, Filter.subtype_coe_map_comap]
  simp only [PartialHomeomorph.univUnitBall, PartialHomeomorph.mk_coe_symm,
    PartialEquiv.coe_symm_mk]
  have : norm ‚àò (fun y ‚Ü¶ (‚àö(1 - ‚Äñy‚Äñ ^ 2))‚Åª¬π ‚Ä¢ y)
      = (fun r ‚Ü¶ (‚àö(1 - r ^ 2))‚Åª¬π * r) ‚àò (norm : E ‚Üí ‚Ñù) := by
    ext y
    simp only [Function.comp_apply, norm_smul, norm_inv, Real.norm_eq_abs, mul_eq_mul_right_iff,
      inv_inj, abs_eq_self, Real.sqrt_nonneg, norm_eq_zero, true_or]
  rw [this]
  apply Filter.Tendsto.comp (y := nhdsWithin 1 (Ico 0 1))
  ¬∑ apply Filter.Tendsto.atTop_mul Real.zero_lt_one
    ¬∑ apply Filter.Tendsto.comp (y := nhdsWithin 0 (Set.Ioi 0))
      ¬∑ exact tendsto_inv_nhdsGT_zero
      ¬∑ refine Filter.Tendsto.mono_right (y := (nhdsWithin 0 (Ioc 0 1))) ?_
          (nhdsWithin_mono 0 Ioc_subset_Ioi_self)
        have h1 : 0 = (fun x ‚Ü¶ ‚àö(1 - x ^ 2)) 1 := by simp
        have h2 : Ioc 0 1 = (fun x ‚Ü¶ ‚àö(1 - x ^ 2)) '' (Ico 0 1) := by
          ext y
          simp only [mem_Ioc, mem_image, mem_Ioo]
          constructor
          ¬∑ intro ‚ü®hy1, hy2‚ü©
            use ‚àö(1 - y ^ 2)
            refine ‚ü®‚ü®?_, ?_‚ü©, ?_‚ü©
            ¬∑ exact Real.sqrt_nonneg (1 - y ^ 2)
            ¬∑ rw [‚Üê Real.sqrt_one]
              apply Real.sqrt_lt_sqrt
              ¬∑ rw [sub_nonneg, Real.sqrt_one, (by norm_num : (1 : ‚Ñù) = 1 ^ 2), sq_le_sq]
                simp only [abs_one, abs_le, (lt_trans neg_one_lt_zero hy1).le, hy2, and_self]
              ¬∑ rw [Real.sqrt_one]
                apply sub_lt_self
                exact sq_pos_of_pos hy1
            ¬∑ suffices ‚àö(1 - y ^ 2) ^ 2 = 1 - y ^ 2 by
                rw [this, sub_sub_cancel, Real.sqrt_sq hy1.le]
              apply Real.sq_sqrt
              rw [sub_nonneg, (by norm_num : (1 : ‚Ñù) = 1 ^ 2), sq_le_sq]
              simp only [abs_one, abs_le, (lt_trans neg_one_lt_zero hy1).le, hy2, and_self]
          ¬∑ intro ‚ü®z, ‚ü®hz1, hz2‚ü©, hz3‚ü©
            rw [‚Üê hz3]
            constructor
            ¬∑ rw [Real.sqrt_pos, sub_pos, sq_lt_one_iff_abs_lt_one, abs_lt]
              exact ‚ü®lt_of_lt_of_le neg_one_lt_zero hz1, hz2‚ü©
            ¬∑ rw [Real.sqrt_le_iff, one_pow]
              refine ‚ü®zero_le_one, ?_‚ü©
              apply sub_le_self
              exact sq_nonneg z
        nth_rw 2 [h1]
        nth_rw 1 [h2]
        apply ContinuousWithinAt.tendsto_nhdsWithin_image
        apply Continuous.continuousWithinAt
        apply Real.continuous_sqrt.comp
        exact (continuous_sub_left 1).comp (continuous_pow 2)
    ¬∑ refine Filter.Tendsto.mono_left (x := nhds 1) ?_ nhdsWithin_le_nhds
      apply ContinuousAt.tendsto
      exact continuous_id.continuousAt
  ¬∑ have h1 : Ico 0 1 = norm '' ball (0 : E) 1 := by
      ext y
      simp only [mem_Ioo, mem_image, mem_ball, dist_zero_right]
      constructor
      ¬∑ intro ‚ü®hy1, hy2‚ü©
        rcases NormedSpace.exists_lt_norm ‚Ñù E 0 with ‚ü®r, hr‚ü©
        use (y / ‚Äñr‚Äñ) ‚Ä¢ r
        suffices ‚Äñ(y / ‚Äñr‚Äñ) ‚Ä¢ r‚Äñ = y by simp [this, hy2]
        simp [norm_smul, div_mul_cancel‚ÇÄ _ hr.ne.symm, hy1]
      ¬∑ intro ‚ü®z, hz1, hz2‚ü©
        rw [‚Üê hz2]
        simp only [mem_Ico, norm_nonneg, hz1, and_self]
    have : 1 = ‚Äñx‚Äñ := by simp_all only [mem_sphere_iff_norm, sub_zero]
    rw [h1, this]
    apply ContinuousWithinAt.tendsto_nhdsWithin_image
    exact continuous_norm.continuousWithinAt

/-- As we approach infinite norm the inverse of hte stereographic projection `stereographic`
  approaches the center of the projection. -/
/- Again, this proof is a basic convergence proof. -/
lemma stereographic_symm_tendsto {E : Type*} [NormedAddCommGroup E] [InnerProductSpace ‚Ñù E] {v : E}
    (hv : ‚Äñv‚Äñ = 1) (Œ± : Filter (‚Ü•(Submodule.span ‚Ñù {v})·óÆ))
    (h : Filter.Tendsto norm Œ± Filter.atTop) :
    Filter.Tendsto (stereographic hv).symm Œ± (nhds ‚ü®v, by simp [hv]‚ü©) := by
  simp only [stereographic, PartialHomeomorph.mk_coe_symm, PartialEquiv.coe_symm_mk]
  rw [nhds_subtype, Filter.tendsto_comap_iff]
  have : Subtype.val ‚àò (stereoInvFun hv) =
      fun (w : ‚Ü•(Submodule.span ‚Ñù {v})·óÆ) ‚Ü¶
      (4 * (‚Äñw‚Äñ ^ 2 + 4)‚Åª¬π) ‚Ä¢ w + ((‚Äñw‚Äñ ^ 2 - 4) * (‚Äñw‚Äñ ^ 2 + 4)‚Åª¬π) ‚Ä¢ v := by
    ext w
    simp only [Function.comp_apply, stereoInvFun_apply, AddSubgroupClass.coe_norm, smul_add,
      smul_smul]
    ring_nf
  rw [this]
  simp only [AddSubgroupClass.coe_norm]
  nth_rw 8 [‚Üê zero_add (a := v)]
  apply Filter.Tendsto.add
  ¬∑ rw [‚Üê comap_norm_nhds_zero, Filter.tendsto_comap_iff]
    have : (norm ‚àò fun (x : ‚Ü•(Submodule.span ‚Ñù {v})·óÆ) ‚Ü¶ (4 * (‚Äñ(x : E)‚Äñ ^ 2 + 4)‚Åª¬π) ‚Ä¢ (x : E)) =
        (fun x ‚Ü¶ 4 * x * (x ^ 2 + 4)‚Åª¬π) ‚àò (norm : ‚Ü•(Submodule.span ‚Ñù {v})·óÆ ‚Üí ‚Ñù) := by
      ext x
      simp only [AddSubgroupClass.coe_norm, Function.comp_apply, norm_smul, norm_mul,
        Real.norm_ofNat, norm_inv, Real.norm_eq_abs,
        abs_of_nonneg (add_nonneg (sq_nonneg ‚Äñ(x : E)‚Äñ) zero_le_four)]
      ring
    rw [this]
    refine Filter.Tendsto.comp ?_ h
    rw [‚Üê mul_zero (a := 4)]
    simp_rw [mul_assoc]
    apply Filter.Tendsto.const_mul
    have : (fun (k : ‚Ñù) ‚Ü¶ k * (k ^ 2 + 4)‚Åª¬π) = fun k ‚Ü¶ (k + 4 * k‚Åª¬π)‚Åª¬π := by
      ext k
      nth_rw 1 [‚Üê inv_inv (a := k), ‚Üê mul_inv, mul_add, pow_two, ‚Üê mul_assoc, inv_mul_mul_self,
        mul_comm]
    rw [this]
    apply Filter.Tendsto.inv_tendsto_atTop
    apply Filter.Tendsto.atTop_add (C := 0) (fun _ a ‚Ü¶ a)
    change Filter.Tendsto (fun x ‚Ü¶ 4 * x‚Åª¬π) Filter.atTop (nhds 0)
    rw [‚Üê mul_zero (a := 4)]
    apply Filter.Tendsto.const_mul
    exact tendsto_inv_atTop_zero
  ¬∑ nth_rw 6 [‚Üê one_smul (M := ‚Ñù) (b := v)]
    apply Filter.Tendsto.smul_const
    have : (fun (x : ‚Ü•(Submodule.span ‚Ñù {v})·óÆ) ‚Ü¶ (‚Äñ(x : E)‚Äñ ^ 2 - 4) * (‚Äñ(x : E)‚Äñ ^ 2 + 4)‚Åª¬π) =
        (fun y ‚Ü¶ (y ^ 2 - 4) * (y ^ 2 + 4)‚Åª¬π) ‚àò (norm : ‚Ü•(Submodule.span ‚Ñù {v})·óÆ ‚Üí ‚Ñù) := by
      ext
      simp
    rw [this]
    refine Filter.Tendsto.comp ?_ h
    have : (fun (y : ‚Ñù) ‚Ü¶ (y ^ 2 - 4) * (y ^ 2 + 4)‚Åª¬π) = fun y ‚Ü¶ 1 + -8 * (y ^ 2 + 4)‚Åª¬π := by
      ext y
      field_simp
      rw [sub_eq_add_neg, add_assoc]
      norm_num
    rw [this]
    nth_rw 2 [‚Üê add_zero (a := 1)]
    apply Filter.Tendsto.const_add
    rw [‚Üê mul_zero (a := -8)]
    apply Filter.Tendsto.const_mul
    apply Filter.Tendsto.inv_tendsto_atTop
    apply Filter.tendsto_atTop_add_const_right
    exact Filter.tendsto_pow_atTop two_ne_zero

/-- As we approach infinite norm the inverse of the stereographic projection `stereographic'`
  approaches the centre of the projection. -/
lemma stereographic'_symm_tendsto {n : ‚Ñï} (Œ± : Filter (EuclideanSpace ‚Ñù (Fin n)))
    (h : Filter.Tendsto norm Œ± Filter.atTop) :
    letI : Fact (Module.finrank ‚Ñù (EuclideanSpace ‚Ñù (Fin (n + 1))) = n + 1) := {
      out := finrank_euclideanSpace_fin (ùïú := ‚Ñù) (n := n + 1)}
    Filter.Tendsto (stereographic' (E := EuclideanSpace ‚Ñù (Fin (n + 1))) n
    ‚ü®EuclideanSpace.single (Fin.last n) 1, by simp‚ü©).symm Œ±
    (nhds ‚ü®EuclideanSpace.single (Fin.last n) 1, by simp‚ü©) := by
  simp only [stereographic', Real.norm_eq_abs, PartialHomeomorph.coe_trans_symm,
    Homeomorph.toPartialHomeomorph_symm_apply, LinearIsometryEquiv.toHomeomorph_symm,
    LinearIsometryEquiv.coe_toHomeomorph]
  rw [‚Üê Filter.tendsto_map'_iff]
  apply stereographic_symm_tendsto
  rw [Filter.tendsto_map'_iff]
  convert h
  ext
  simp

/-! # Scaling to a different norm-/

/- The domain of the characterstic maps of a CW-complex (in our definition) are cubes in
  `Fin n ‚Üí ‚Ñù` (with the `‚àû`-metric).
  But the most convenient characteristic maps for spheres have closed balls in
  `EuclideanSpace ‚Ñù (Fin n)` as their domain.
  We therefore need a map from cubes to closed balls.
  We define this map in a little more generality. -/


-- This is just a preliminary lemma showing the continuity of the map we are about to define.
lemma continuous_normScale {E F : Type*}  [SeminormedAddCommGroup E] [T1Space E]
    [NormedAddCommGroup F] [MulActionWithZero ‚Ñù F]
    {f : E ‚Üí F} (hf : Continuous f) [ContinuousSMul ‚Ñù F] [BoundedSMul ‚Ñù F]
    (hf0 : ‚àÄ x, f x = 0 ‚Üî x = 0) :
    Continuous fun x ‚Ü¶ (‚Äñx‚Äñ * ‚Äñf x‚Äñ‚Åª¬π) ‚Ä¢ (f x) := by
  rw [continuous_iff_continuousOn_univ, ‚Üê diff_union_of_subset (subset_univ {0})]
  rw [(compl_eq_univ_diff {0}).symm]
  apply ContinuousOn.union_continuousAt
  ¬∑ rw [isOpen_compl_iff]
    exact isClosed_singleton
  ¬∑ apply ContinuousOn.smul
    ¬∑ apply continuous_norm.continuousOn.mul
      apply ContinuousOn.inv‚ÇÄ
      ¬∑ exact (continuous_norm.comp hf).continuousOn
      ¬∑ intros
        simp_all
    ¬∑ exact hf.continuousOn
  ¬∑ intro x hx
    rw [mem_singleton_iff] at hx
    subst x
    simp only [ContinuousAt, norm_zero, zero_mul, zero_smul]
    rw [tendsto_zero_iff_norm_tendsto_zero]
    simp_rw [norm_smul, norm_mul, norm_inv, norm_norm, mul_assoc]
    have : (fun x ‚Ü¶ ‚Äñx‚Äñ * (‚Äñf x‚Äñ‚Åª¬π * ‚Äñf x‚Äñ)) = fun x ‚Ü¶ ‚Äñx‚Äñ := by
      ext x
      by_cases h : x = 0
      ¬∑ simp [h]
      ¬∑ have hfx : ‚Äñf x‚Äñ ‚â† 0 := by
          intro s
          simp_all
        rw [inv_mul_cancel‚ÇÄ hfx, mul_one]
    rw [this, ‚Üê norm_zero (E := E)]
    exact continuous_norm.continuousAt

/-- A homeomorphism from one normed group to another that preserves norms and the zero.-/
/- Unfortunatly this does not preserve distances so this is not an isometry
  (in fact such an isometry generally does not exist). -/
def normScale {E F : Type*}  [NormedAddCommGroup E] [T1Space E] [Module ‚Ñù E]
    [ContinuousSMul ‚Ñù E] [BoundedSMul ‚Ñù E] [NormedAddCommGroup F] [Module ‚Ñù F] [T1Space F]
    [ContinuousSMul ‚Ñù F] [BoundedSMul ‚Ñù F] (f : E ‚âÉL[‚Ñù] F) : E ‚âÉ‚Çú F where
  toFun x := (‚Äñx‚Äñ * ‚Äñf x‚Äñ‚Åª¬π) ‚Ä¢ (f x)
  invFun y := (‚Äñy‚Äñ * ‚Äñf.symm y‚Äñ‚Åª¬π) ‚Ä¢ (f.symm y)
  left_inv x := by
    by_cases h : x = 0
    ¬∑ simp only [h, norm_zero, zero_mul, zero_smul]
    ¬∑ simp only [norm_smul, norm_mul, norm_norm, norm_inv, map_smul,
        ContinuousLinearEquiv.symm_apply_apply, mul_inv_rev, inv_inv, smul_smul]
      suffices ‚Äñx‚Äñ * ‚Äñf x‚Äñ‚Åª¬π * ‚Äñf x‚Äñ * (‚Äñx‚Äñ‚Åª¬π * (‚Äñf x‚Äñ * ‚Äñx‚Äñ‚Åª¬π)) * (‚Äñx‚Äñ * ‚Äñf x‚Äñ‚Åª¬π) = 1 by
        rw [this, one_smul]
      have h1 : ‚Äñx‚Äñ ‚â† 0 := by
        intro hx
        apply h
        exact norm_eq_zero.mp hx
      have h2 : ‚Äñf x‚Äñ ‚â† 0 := by
        intro hx
        apply h
        simp_all only [ne_eq, norm_eq_zero, not_false_eq_true, EmbeddingLike.map_eq_zero_iff]
      field_simp [h1, h2]
      ring
  right_inv y := by
    by_cases h : y = 0
    ¬∑ simp only [h, norm_zero, map_zero, inv_zero, mul_zero, smul_zero]
    ¬∑ simp only [norm_smul, norm_mul, norm_norm, norm_inv, map_smul,
        ContinuousLinearEquiv.apply_symm_apply, mul_inv_rev, inv_inv, smul_smul]
      suffices ‚Äñy‚Äñ * ‚Äñf.symm y‚Äñ‚Åª¬π * ‚Äñf.symm y‚Äñ *
          (‚Äñy‚Äñ‚Åª¬π * (‚Äñf.symm y‚Äñ * ‚Äñy‚Äñ‚Åª¬π)) * (‚Äñy‚Äñ * ‚Äñf.symm y‚Äñ‚Åª¬π) = 1 by
        rw [this, one_smul]
      have h1 : ‚Äñy‚Äñ ‚â† 0 := by
        intro hy
        apply h
        exact norm_eq_zero.mp hy
      have h2 : ‚Äñf.symm y‚Äñ ‚â† 0 := by
        intro hy
        apply h
        simp_all only [ne_eq, norm_eq_zero, not_false_eq_true, EmbeddingLike.map_eq_zero_iff]
      field_simp [h1, h2]
      ring
  continuous_toFun := continuous_normScale f.continuous (fun _ ‚Ü¶ f.map_eq_zero_iff)
  continuous_invFun := continuous_normScale f.symm.continuous (fun _ ‚Ü¶ f.symm.map_eq_zero_iff)

/-- `normScale` preserves the zero. -/
@[simp]
lemma normScale_zero {E F : Type*}  [NormedAddCommGroup E] [T1Space E] [Module ‚Ñù E]
    [ContinuousSMul ‚Ñù E] [BoundedSMul ‚Ñù E] [NormedAddCommGroup F] [Module ‚Ñù F] [T1Space F]
    [ContinuousSMul ‚Ñù F] [BoundedSMul ‚Ñù F] (f : E ‚âÉL[‚Ñù] F) :
    normScale f 0 = 0 := by
  simp [normScale]

/-- `normScale` is norm-preserving. -/
@[simp]
lemma norm_normScale {E F : Type*}  [NormedAddCommGroup E] [T1Space E] [Module ‚Ñù E]
    [ContinuousSMul ‚Ñù E] [BoundedSMul ‚Ñù E] [NormedAddCommGroup F] [Module ‚Ñù F] [T1Space F]
    [ContinuousSMul ‚Ñù F] [BoundedSMul ‚Ñù F] (f : E ‚âÉL[‚Ñù] F) {x : E} : ‚ÄñnormScale f x‚Äñ = ‚Äñx‚Äñ := by
  simp only [normScale, Homeomorph.homeomorph_mk_coe, Equiv.coe_fn_mk, norm_smul, norm_mul,
    Real.norm_eq_abs, abs_norm, norm_inv, mul_assoc]
  by_cases h : x = 0
  ¬∑ simp [h]
  ¬∑ have hfx : ‚Äñf x‚Äñ ‚â† 0 := by
      intro s
      simp_all
    rw [inv_mul_cancel‚ÇÄ hfx, mul_one]

/-- The inverse of `normScale` of the continuous linear bijection `f` is just
  `normScale` of the inverse of `f`. -/
lemma normScale_symm_eq {E F : Type*}  [NormedAddCommGroup E] [T1Space E] [Module ‚Ñù E]
    [ContinuousSMul ‚Ñù E] [BoundedSMul ‚Ñù E] [NormedAddCommGroup F] [Module ‚Ñù F] [T1Space F]
    [ContinuousSMul ‚Ñù F] [BoundedSMul ‚Ñù F] (f : E ‚âÉL[‚Ñù] F) :
    (normScale f).symm = normScale f.symm := by
  ext
  simp [normScale]

/-- `normScale` preserves closed balls.-/
@[simp]
lemma normScale_image_closedBall {E F : Type*}  [NormedAddCommGroup E] [T1Space E] [Module ‚Ñù E]
    [ContinuousSMul ‚Ñù E] [BoundedSMul ‚Ñù E] [NormedAddCommGroup F] [Module ‚Ñù F] [T1Space F]
    [ContinuousSMul ‚Ñù F] [BoundedSMul ‚Ñù F] (f : E ‚âÉL[‚Ñù] F) (r : ‚Ñù) :
    normScale f '' closedBall 0 r = closedBall 0 r := by
  ext x
  simp only [mem_image, mem_closedBall, dist_zero_right]
  constructor
  ¬∑ intro ‚ü®y, hy1, hy2‚ü©
    rw [‚Üê hy2]
    rw [norm_normScale]
    exact hy1
  ¬∑ intro hx
    use (normScale f).symm x
    rw [Homeomorph.apply_symm_apply, normScale_symm_eq, norm_normScale]
    exact ‚ü®hx, rfl‚ü©

/-- `normScale` preserves balls. -/
@[simp]
lemma normScale_image_ball {E F : Type*}  [NormedAddCommGroup E] [T1Space E] [Module ‚Ñù E]
    [ContinuousSMul ‚Ñù E] [BoundedSMul ‚Ñù E] [NormedAddCommGroup F] [Module ‚Ñù F] [T1Space F]
    [ContinuousSMul ‚Ñù F] [BoundedSMul ‚Ñù F] (f : E ‚âÉL[‚Ñù] F) (r : ‚Ñù) :
    normScale f '' ball 0 r = ball 0 r := by
  ext x
  simp only [mem_image, mem_ball, dist_zero_right]
  constructor
  ¬∑ intro ‚ü®y, hy1, hy2‚ü©
    rw [‚Üê hy2]
    rw [norm_normScale]
    exact hy1
  ¬∑ intro hx
    use (normScale f).symm x
    rw [Homeomorph.apply_symm_apply, normScale_symm_eq, norm_normScale]
    exact ‚ü®hx, rfl‚ü©

/-- `normScale` preserves spheres. -/
@[simp]
lemma normScale_image_sphere {E F : Type*}  [NormedAddCommGroup E] [T1Space E] [Module ‚Ñù E]
    [ContinuousSMul ‚Ñù E] [BoundedSMul ‚Ñù E] [NormedAddCommGroup F] [Module ‚Ñù F] [T1Space F]
    [ContinuousSMul ‚Ñù F] [BoundedSMul ‚Ñù F] (f : E ‚âÉL[‚Ñù] F) (r : ‚Ñù) :
    normScale f '' sphere 0 r = sphere 0 r := by
  ext x
  simp only [mem_image, mem_sphere, dist_zero_right]
  constructor
  ¬∑ intro ‚ü®y, hy1, hy2‚ü©
    rw [‚Üê hy2]
    rw [norm_normScale]
    exact hy1
  ¬∑ intro hx
    use (normScale f).symm x
    rw [Homeomorph.apply_symm_apply, normScale_symm_eq, norm_normScale]
    exact ‚ü®hx, rfl‚ü©

/-- An specification of `normScale` that scales between the `‚àû`- and the euclidean metric. -/
def toEuclideanNormScale (n : ‚Ñï) : (Fin n ‚Üí ‚Ñù) ‚âÉ‚Çú EuclideanSpace ‚Ñù (Fin n) :=
  (normScale (toEuclidean (E := Fin n ‚Üí ‚Ñù))).trans
  (LinearIsometryEquiv.piLpCongrLeft 2 ‚Ñù ‚Ñù (finCongr (Module.finrank_fin_fun ‚Ñù))).toHomeomorph

/-- `toEuclideanNormScale` preserves the zero. -/
@[simp]
lemma toEuclideanNormScale_zero (n : ‚Ñï) : toEuclideanNormScale n 0 = 0 := by
  simp [toEuclideanNormScale, map_zero]

/-- `toEuclideanNormScale` is norm-preserving. -/
@[simp]
lemma norm_toEuclideanNormScale (n : ‚Ñï) (x : Fin n ‚Üí ‚Ñù) : ‚ÄñtoEuclideanNormScale n x‚Äñ = ‚Äñx‚Äñ := by
  simp only [toEuclideanNormScale, Homeomorph.trans_apply, LinearIsometryEquiv.coe_toHomeomorph,
    LinearIsometryEquiv.norm_map, norm_normScale]

/-- `toEuclideanNormScale` preserves closed balls. -/
@[simp]
lemma toEuclideanNormScale_image_closedBall (n : ‚Ñï) (r : ‚Ñù) :
    toEuclideanNormScale n '' closedBall 0 r = closedBall 0 r := by
  simp only [toEuclideanNormScale, Homeomorph.trans_apply, LinearIsometryEquiv.coe_toHomeomorph, ‚Üê
    image_image, normScale_image_closedBall, LinearIsometryEquiv.image_closedBall, map_zero]

/-- `toEuclideanNormScale` preserves balls. -/
@[simp]
lemma toEuclideanNormScale_image_ball (n : ‚Ñï) (r : ‚Ñù) :
    toEuclideanNormScale n '' ball 0 r = ball 0 r := by
  simp only [toEuclideanNormScale, Homeomorph.trans_apply, LinearIsometryEquiv.coe_toHomeomorph, ‚Üê
    image_image, normScale_image_ball, LinearIsometryEquiv.image_ball, map_zero]

/-- `toEuclideanNormScale` preserves spheres. -/
@[simp]
lemma toEuclideanNormScale_image_sphere (n : ‚Ñï) (r : ‚Ñù) :
    toEuclideanNormScale n '' sphere 0 r = sphere 0 r := by
  simp only [toEuclideanNormScale, Homeomorph.trans_apply, LinearIsometryEquiv.coe_toHomeomorph, ‚Üê
    image_image, normScale_image_sphere, LinearIsometryEquiv.image_sphere, map_zero]

/-! # A Homeomorphism that flips the last coordinate-/

/- For the inductive construction of the sphere we pricipally need two maps:
  One that maps from the closed ball in dimension `n` to the upper hemisphere of the sphere in
  dimension `n + 1`, and one that does the same for the lower hemisphere.
  In order to not define essentially the same map twice, we define a linear bijective isometry
  that reflects the space on the hyperplane where the last coordinate is zero. -/

/-- A specialized version of `LinearIsometryEquiv.reflection` reflecting
  `EuclideanSpace ‚Ñù (Fin (n + 1))` on the hyperplane where the last coordinate is zero. -/
def LinearIsometryEquiv.negLast (n : ‚Ñï) :
    EuclideanSpace ‚Ñù (Fin (n + 1)) ‚âÉ‚Çó·µ¢[‚Ñù] EuclideanSpace ‚Ñù (Fin (n + 1)) where
  toFun x := Function.update x (Fin.last n) (-(x (Fin.last n)))
  map_add' x y := by
    ext i
    by_cases h : i = Fin.last n
    ¬∑ subst i
      simp [add_comm]
    ¬∑ unfold Function.update
      simp [h]
  map_smul' m x := by
    ext i
    by_cases h : i = Fin.last n
    ¬∑ subst i
      simp [add_comm]
    ¬∑ unfold Function.update
      simp [h]
  invFun y := Function.update y (Fin.last n) (-(y (Fin.last n)))
  left_inv x := by simp
  right_inv y := by simp
  norm_map' x := by
    simp [EuclideanSpace.norm_eq, Fin.sum_univ_castSucc, fun i ‚Ü¶ (Fin.castSucc_lt_last i).ne]

/-- `LinearIsometryEquiv.negLast` is idempotent. -/
@[simp]
lemma LinearIsometryEquiv.negLast_idempotent (n : ‚Ñï) (x : EuclideanSpace ‚Ñù (Fin (n + 1))) :
    negLast n (negLast n x) = x := by
  ext i
  unfold negLast Function.update
  by_cases h : i = Fin.last n
  ¬∑ simp only [eq_rec_constant, dite_eq_ite, coe_mk, LinearEquiv.coe_mk, h, ‚ÜìreduceIte, neg_neg]
    rw [‚Üê h]
  ¬∑ simp [h]

/-! # Miscellaneous-/

/-- The isometry between the euclidean and the `‚àû`-metric on `‚Ñù`.-/
def EuclideanFunUnique (n ùïú : Type*) [RCLike ùïú] [Unique n] [Fintype n] :
    EuclideanSpace ùïú n ‚âÉ·µ¢ (n ‚Üí ùïú) where
  toFun := id
  invFun := id
  left_inv := by intro; rfl
  right_inv := by intro; rfl
  isometry_toFun := by
    intro x y
    simp [edist_pi_def, EuclideanSpace.edist_eq, ‚Üê ENNReal.rpow_natCast_mul]

/-- The isometry between the euclidean and the usual metric on `‚Ñù`.-/
def EuclideanUnique (ùïú n : Type*) [RCLike ùïú] [Unique n] [Fintype n] : EuclideanSpace ùïú n ‚âÉ·µ¢ ùïú :=
  (EuclideanFunUnique n ùïú).trans (IsometryEquiv.funUnique n ùïú)

/-- `Fin.init` is continuous. -/
/- This still needs to be generalized. -/
lemma Continuous.finInit {n : ‚Ñï} {Œ± : Type*} [PseudoMetricSpace Œ±] :
    Continuous (Fin.init : (Fin (n + 1) ‚Üí Œ±) ‚Üí (Fin n ‚Üí Œ±)) := by
  rw [Metric.continuous_iff]
  intro b Œµ hŒµ
  use Œµ, hŒµ
  intro a hab
  suffices dist (Fin.init a) (Fin.init b) ‚â§ dist a b from lt_of_le_of_lt this hab
  simp only [dist_pi_def, Fin.init, NNReal.coe_le_coe, Finset.sup_le_iff, Finset.mem_univ,
    forall_const]
  intro c
  exact Finset.le_sup (Finset.mem_univ c.castSucc) (f := fun x ‚Ü¶ nndist (a x) (b x))

/-- The euclidean norm of `Fin.init` is less then or equal to the euclidean norm of the element. -/
lemma EuclideanSpace.norm_finInit_le {ùïú : Type*} [RCLike ùïú] {n : ‚Ñï}
    (q : EuclideanSpace ùïú (Fin (n + 1))) :
    norm (Fin.init q : EuclideanSpace ùïú (Fin n)) (self := (PiLp.instNorm 2 fun x ‚Ü¶ ùïú)) ‚â§ ‚Äñq‚Äñ := by
  simp_rw [‚Üê sq_le_sq‚ÇÄ (norm_nonneg _) (norm_nonneg _), EuclideanSpace.norm_eq,
    Real.sq_sqrt (Finset.sum_nonneg (fun _ _ ‚Ü¶ sq_nonneg _)), Fin.sum_univ_castSucc, Fin.init,
    le_add_iff_nonneg_right]
  exact sq_nonneg ‚Äñq (Fin.last n)‚Äñ

/-- If the last coordinate of an element `q` is greater than zero in norm then the euclidean norm
  of `Fin.init q` is strictly less than the euclidean norm of `q`. -/
/- The hypthesis `hq` should be generalised. -/
lemma EuclideanSpace.norm_finInit_lt {ùïú : Type*} [RCLike ùïú] {n : ‚Ñï}
    (q : EuclideanSpace ùïú (Fin (n + 1))) (hq : ‚Äñq (Fin.last n)‚Äñ > 0):
    norm (Fin.init q : EuclideanSpace ùïú (Fin n)) (self := (PiLp.instNorm 2 fun x ‚Ü¶ ùïú)) < ‚Äñq‚Äñ := by
  simp_rw [‚Üê sq_lt_sq‚ÇÄ (norm_nonneg _) (norm_nonneg _), EuclideanSpace.norm_eq,
    Real.sq_sqrt (Finset.sum_nonneg (fun _ _ ‚Ü¶ sq_nonneg _)), Fin.sum_univ_castSucc, Fin.init,
    lt_add_iff_pos_right]
  exact sq_pos_of_pos hq

/-- The norm of `Fin.init` is less than or equal to the norm of the original element. -/
lemma Fin.norm_init_le {n : ‚Ñï} {Œ± : Type*} [SeminormedAddGroup Œ±] (q : (Fin (n + 1)) ‚Üí Œ±) :
    ‚ÄñFin.init q‚Äñ ‚â§ ‚Äñq‚Äñ := by
  simp only [Pi.norm_def, NNReal.coe_le_coe, Finset.sup_le_iff, Finset.mem_univ, forall_const]
  intro b
  exact Finset.le_sup (Finset.mem_univ b.castSucc) (f := fun x ‚Ü¶ ‚Äñq x‚Äñ‚Çä)
